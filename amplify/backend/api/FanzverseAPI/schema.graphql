type Usr @model @auth(rules: [
  { allow: public, provider: apiKey, operations: [create, read, update, delete] }
]) {
  id: ID!
  username: String!
  fullname: String!
  email: String!
  pfp: String
  bio: String
  followers: [String]
  following: [Person]
  news: String
}

type Person {
  name: String!
  news: String!
}
type FollowRequest @model @auth(rules: [
  { allow: public, provider: apiKey, operations: [create, read, update, delete] }
]) {
  id: ID!
  fromUser: String!
  toUser: String!
  status: FollowRequestStatus!
}

enum FollowRequestStatus{
  PENDING
  ACCEPTED
  REJECTED
}

type Post @model @auth(rules: [
  { allow: public, provider: apiKey, operations: [create, read, update, delete] }
]) {
  id: ID!
  content: String!
  author: String!
  media: String
  typ: String
  createdAt: String
}

type Like @model @auth(rules: [
  { allow: public, provider: apiKey, operations: [create, read, update, delete] }
]) {
  id: ID!
  username: String!
  postID: String!
  to: String!
}

type Comment @model @auth(rules: [
  { allow: public, provider: apiKey, operations: [create, read, update, delete] }
]) {
  id: ID!
  author: String!
  postID: String!
  content: String!
  createdAt: String
}

type Event @model @auth(rules: [
  { allow: public, provider: apiKey, operations: [create, read, update, delete] }
]) {
  id: ID!
  organizer: String!
  title: String!
  description: String!
  location: String!
  startDate: String!
  startTime: String!
  endDate: String!
  endTime: String!
  privacy: Boolean!
  code: String
  genCode: [String]
  settings: Boolean!
  members: [String]
  background: String!
  status: Boolean!
  createdAt: String
}

type eventPost @model @auth(rules: [
  { allow: public, provider: apiKey, operations: [create, read, update, delete] }
]) {
  id: ID!
  content: String!
  author: String!
  eventID: String!
  media: String
  typ: String
  createdAt: String
}